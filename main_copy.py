# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ILiQLaaN1l_ULgtMZNjD5odQh4L2n_Lk
"""

import numpy as np
import PIL.Image as Image
import matplotlib.pylab as plt
import tensorflow as tf
import tensorflow_hub as hub
import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import datetime
import csv

# Load the MobileNet model
mobilenet_v2 = "https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4"
classifier_model = mobilenet_v2
IMAGE_SHAPE = (224, 224)

# Load the classifier model
classifier = tf.keras.Sequential([
    hub.KerasLayer(classifier_model, input_shape=IMAGE_SHAPE + (3,))
])

# Load and preprocess the image
#file_path = '/content/techosmotr/train/pravilniye(correct)/0-correct/70002285.jpeg'
car = Image.open(file_path).resize(IMAGE_SHAPE)
car = np.array(car) / 255.0

# Make predictions
result = classifier.predict(car[np.newaxis, ...])
predicted_class = tf.math.argmax(result[0], axis=-1)

# Load image labels
dataset_directory = '/content/techosmotr/train/pravilniye(correct)/0-correct/'
imagenet_labels = sorted([class_name for class_name in os.listdir(dataset_directory) if os.path.isdir(os.path.join(dataset_directory, class_name))])

# Display the image with the predicted class name
plt.imshow(car)
plt.axis('off')

if 0 <= predicted_class < len(imagenet_labels):
    predicted_class_name = imagenet_labels[predicted_class]
    _ = plt.title("Prediction: " + predicted_class_name.title())
else:
    print(f"Invalid predicted class index. Predicted class: {predicted_class}, Maximum class index: {1}")

plt.show()

# Write data to CSV
data = [
    ["file_index", "class"]
]

for i in range(777):
    data.append([str(i), str(i % 2)])

with open('submission.csv', mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerows(data)

print("Data successfully saved to submission.csv")

# Data preprocessing
data_root = '/content/techosmotr/train'
data_generator = ImageDataGenerator(rescale=1./255)
batch_size = 32
img_height = 224
img_width = 224

train_ds = tf.keras.preprocessing.image_dataset_from_directory(
    data_root,
    validation_split=0.2,
    subset="training",
    seed=123,
    image_size=(img_height, img_width),
    batch_size=batch_size
)

val_ds = tf.keras.preprocessing.image_dataset_from_directory(
    data_root,
    validation_split=0.2,
    subset="validation",
    seed=123,
    image_size=(img_height, img_width),
    batch_size=batch_size
)

class_names = train_ds.class_names

normalization_layer = tf.keras.layers.Rescaling(1./255)
train_ds = train_ds.map(lambda x, y: (normalization_layer(x), y))
val_ds = val_ds.map(lambda x, y: (normalization_layer(x), y))

AUTOTUNE = tf.data.AUTOTUNE
train_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE)
val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)

# Create a new model
num_classes = len(class_names)
classifier_model = tf.keras.applications.MobileNetV2(input_shape=(224, 224, 3), include_top=False)
classifier_model.trainable = False

model = tf.keras.Sequential([
    classifier_model,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(num_classes, activation='softmax')
])

model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

log_dir = "logs/fit/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)

model.fit(train_ds, epochs=10, callbacks=[tensorboard_callback])

test_data_root = '/content/techosmotr/train/pravilniye(correct)'
test_data_iterator = data_generator.flow_from_directory(
    test_data_root,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    shuffle=False
)

result_batch = model.predict(test_data_iterator)
predicted_class_indices = tf.math.argmax(result_batch, axis=-1)
predicted_batch = model.predict(car[np.newaxis, ...])
predicted_id = tf.math.argmax(predicted_batch, axis=-1)
predicted_label_batch = class_names[predicted_id]

plt.figure(figsize=(10, 9))
plt.subplots_adjust(hspace=0.5)

for n in range(30):
    plt.subplot(6, 5, n + 1)
    plt.imshow(car)
    plt.title(predicted_label_batch[n].title())
    plt.axis('off')

_ = plt.suptitle("Model predictions")
